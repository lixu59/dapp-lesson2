pragma solidity >=0.7.0 <0.9.0;
library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }
    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}


// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
import "./Math.sol";
import "./FT.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
contract ExchangeTokens{
    FT public ft;
    IERC20 public tokenD;
    IERC20 public tokenN;
    constructor(address _tokenD,address _tokenN,FT _ft){
        tokenD = IERC20(_tokenD);
        tokenN = IERC20(_tokenN);
        ft=_ft;
    }
    uint public totalD = 0;
    uint public totalN = 0;
    uint public LPtoken = 0;
    uint public liquidity = 0;
    uint public k = 0;
    function addLiquidity(uint addnumberD,uint addnumberN) external{
        if (LPtoken==0) {
            tokenD.transferFrom(msg.sender, address(this), addnumberD);
            tokenN.transferFrom(msg.sender, address(this), addnumberN);
            totalD += addamountD;
            totalN += addamountN;
            LPtoken += Math.sqrt(totalD*totalN);
            liquidity = LPtoken;
            k = totalD*totalN;
            ft.mint(msg.sender, LPtoken);
            ft.mint(msg.sender, Math.sqrt(totalD*totalN));
        } else {
            uint256 transferTokenNAmount = (addnumberD+totalD)*totalN/totalD;
            require(transferTokenNAmount==addnumberN);
            tokenD.transferFrom(msg.sender, address(this), addnumberD);
            tokenN.transferFrom(msg.sender, address(this), addnumberN);
            totalD += addnumberD;
            totalN += addnumberN;
            k = totalD*totalN;
            liquidity = Math.sqrt(totalD*totalN);
            LPtoken += Math.sqrt(addnumberD*addnumberN);
            ft.mint(msg.sender, Math.sqrt(addnumberD*addnumberN));
        }
    }

    function removeLiquidity(uint removeTokenDnumber,uint _removeTokenNnumber) external {
        uint removeTokenNnumber =totalN - k/(totalD-removeTokenDnumber);
        require(removeTokenNnumber== _removeTokenNnumber);
        ft.burn(Math.sqrt(removeTokenDnumber*removeTokenNnumber));
        LPtoken -= Math.sqrt(removeTokenDnumber*removeTokenNnumber);
        totalD-=removeTokenDnumber;
        totalN-=removeTokenNnumber;
        k = totalD*totalN;
        tokenD.transfer(msg.sender, removeTokenDnumber);
        tokenN.transfer(msg.sender, removeTokenNnumber);
    }

    function gettokenNOutnumber(uint amountD) public view returns(uint) {
          uint tokenNOutnumber = totalN-(totalD+amountD)/k;
          return tokenNOutnumber;
    }
    function gettokenDOutnumber(uint amountN) public view returns(uint) {
          uint tokenDOutnumber = totalD-(totalN+amountN)/k;
          return tokenDOutnumber;
    }
    function substitute(uint amountInputD) external {
        uint tokenNOutnumber = gettokenNOutnumber(amountInputD);
        tokenNOutnumber = tokenNOutnumber *997/1000;
        if(tokenNOutnumber>=tokenNOutnumber*7/10){
            revert("收益不足");
        }
        tokenD.transferFrom(msg.sender, address(this),amountInputD);
        tokenN.transfer(msg.sender,tokenNOutnumber);
        totalD+=amountInputD;
        totalN-=tokenNOutnumber;
        k = totalD*totalN;
    }
    function substitute(uint amountInputN) external {
        uint tokenDOutnumber = gettokenDOutnumber(amountInputN);
        tokenDOutnumber = tokenDOutnumber *997/1000;
        if(tokenDOutnumber>=tokenDOutnumber*7/10){
            revert("收益不足");
        }
        tokenN.transferFrom(msg.sender, address(this),amountInputN);
        tokenD.transfer(msg.sender,tokenDOutnumber);
        totalN+=amountInputN;
        totalD-=tokenDOutnumber;
        k = totalD*totalN;
    }


}


// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
import "./exchange.sol";
contract Factory{
    FT public ft;
    constructor(FT _ft){
        ft=_ft;
    }
    mapping (address => mapping (address => address)) public Pair;
    address [] public allPairs;
    function createPair(address tokenD, address tokenN) external returns (address pair){
        require(tokenD != tokenN, 'IDENTICAL_ADDRESSES');
        (address token0, address token1) = tokenD < tokenN ? (tokenD, tokenN) : (tokenN, tokenD);
        require(token0 != address(0), 'ZERO_ADDRESS');
        bytes memory bytecode = type(exchange).creationCode;
        bytes32 aa = keccak256(abi.encodePacked(token0,token1));
        assembly {               
            pair := create2(0, add(bytecode, 32), mload(bytecode), aa)
        }
        new exchange{
            aa : aa
        }(token0,token1,ft);
        Pair[token0][token1] = pair;
        Pair[token1][token0] = pair;
        allPairs.push(pair);
    }
    function check(address tokenD,address tokenN) external view   returns(bool) {
        return Pair[tokenD][tokenN] != address(0);
    }

    function getPair(address tokenD,address tokenN) view external  returns (address) {
        return Pair[tokenD][tokenN];
    }



}
